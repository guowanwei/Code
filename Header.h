//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float GlobalTime;
//   float4 LayersSinusSpeedScale;
//   float4x4 LocalToWorld;
//   float4 ScalesLayer12;
//   float4 ScalesLayer34;
//   float4 ScrollSpeeds;
//   float4x4 ViewProjectionMatrix;
//
//
// Registers:
//
//   Name                  Reg   Size
//   --------------------- ----- ----
//   ViewProjectionMatrix  c0       4
//   LocalToWorld          c6       4
//   GlobalTime            c10      1
//   ScrollSpeeds          c11      1
//   LayersSinusSpeedScale c12      1
//   ScalesLayer12         c13      1
//   ScalesLayer34         c14      1
//

vs_3_0
def c4, 6.28318548, -3.14159274, -2.52398507e-007, 2.47609005e-005
def c5, 6.28318501, 0.159154937, 0.25, -0.00138883968
def c15, 0.159154937, 0.25, 0.5, 0
def c16, 0.0416666418, -0.5, 1, 0
dcl_position v0
dcl_texcoord v1
dcl_texcoord o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_position o5
r1.xz = 1 / LayersSinusSpeedScale.xy
r1.yw = 1/ LayersSinusSpeedScale.xy
r0.xyzw = time * 1/ LayersSinusSpeedScale.xxyy + 0.25
frc r0, r0
mad r0, r0, c4.x, c4.y
r0.xyzw = 2PI*time/ LayersSinusSpeedScale.xxyy  - PI * 0.5
mul r0, r0, r0
r0.xyzw = ( 2PI*time / LayersSinusSpeedScale.xxyy - PI * 0.5 )2
r0 = SINT = sin(2PI*time / LayersSinusSpeedScale.xxyy) * LayersSinusSpeedScale.zzww
mad r0, r0, c15.x, c15.yzyz
r0 = SINT / 2PI + (0.25, 0.5, 0.25, 0.5)
frc r0, r0
mad r0, r0, c4.x, c4.y
r0 = ( SINT + (-0.5PI, 0, -0.5PI, 0) ) 2
mul r0, r0, r0
r0 = (SINT + (-0.5PI, 0, -0.5PI, 0)) 2
mad r1, r0, c4.z, c4.w
mad r1, r0, r1, c5.w
mad r1, r0, r1, c16.x
mad r1, r0, r1, c16.y
mad r0, r0, r1, c16.z
r0 = cos()(SINT + (-0.5PI, 0, -0.5PI, 0)) 2
r0.x = r0.z = sin(SINT)
r0.y = r0.w = cos(SINT)
r1.xy = (v * (0, 1) + (1, -0.5)) * (cos(SINT), sin(SINT))
r1.zw = r1.xy
r2.xy = CenteredUV = UV - float2(0.5f, 0.5f);
r2.zw = r2.xy
r1.x = r1.z = cos(SINT) * CenteredU - CenteredV * sin(sint)
//dot(Cosines.xz*float2(1, -1), CenteredUV)
r0.xy = (sin(SINT), cos(SINT)) * CenteredUV
r0.zw = r0.xy
r1.y = r1.w = dot((sin(SINT), cos(SINT)), CenteredUV)
//dot(Cosines.zx, CenteredUV)
///////////////////////////////////////////////////////
r1.x = r1.z = cos(SINT) * CenteredU - CenteredV * sin(sint)
//dot(Cosines.xz*float2(1, -1), CenteredUV)

r0.xyzw = r1.xyzw + 0.5
r1.xyzw = ScrollSpeeds * time
o3.yw = ScalesLayer12 * (r1.xyzw + 0.5) - ScrollSpeeds.xy * time
o3.xz = ScalesLayer12 * (r1.xyzw + 0.5)
o4.yw = ScalesLayer34.yw * v - ScrollSpeeds.zw * time
o4.xz = ScalesLayer34.xz * u;
mul r0.xyz, c7, v0.y
mad r0.xyz, c6, v0.x, r0
mad r0.xyz, c8, v0.z, r0
mad r0.xyz, c9, v0.w, r0
mul r1, r0.y, c1
mad r1, c0, r0.x, r1
mad r0, c2, r0.z, r1
mad r0, c3, v0.w, r0
mov o0, r0
mov o5, r0
mov o1, c16.w
mov o2, c16.w
mul r0.xy, c14.xzzw, v1.x
mov o4.xz, r0.xyyw

// approximately 51 instruction slots used




//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float GlobalTime;
//   float4 LayersSinusSpeedScale;
//   float4x4 LocalToWorld;
//   float4 ScalesLayer12;
//   float4 ScalesLayer34;
//   float4 ScrollSpeeds;
//   float4x4 ViewProjectionMatrix;
//
//
// Registers:
//
//   Name                  Reg   Size
//   --------------------- ----- ----
//   ViewProjectionMatrix  c0       4
//   LocalToWorld          c6       4
//   GlobalTime            c10      1
//   ScrollSpeeds          c11      1
//   LayersSinusSpeedScale c12      1
//   ScalesLayer12         c13      1
//   ScalesLayer34         c14      1
//

vs_3_0
def c4, 6.28318548, -3.14159274, -2.52398507e-007, 2.47609005e-005
def c5, 6.28318501, 0.159154937, 0.25, -0.00138883968
def c15, 0.159154937, 0.25, 0.5, 0
def c16, 0.0416666418, -0.5, 1, 0
dcl_position v0
dcl_texcoord v1
dcl_texcoord o0    // screen space
dcl_texcoord1 o1   // c16.w = 1
dcl_texcoord2 o2	// c16.w = 1
dcl_texcoord3 o3   // 12 cenguv
dcl_texcoord4 o4   // 34 cenguv
dcl_position o5   // pro
mov r0.x, c5.x
mul r0.x, r0.x, c10.x
rcp r1.xy, c12.x
rcp r1.zw, c12.y
mul r0, r0.x, r1
mad r0, r0, c5.y, c5.z
frc r0, r0
mad r0, r0, c4.x, c4.y
mul r0, r0, r0
mad r1, r0.yyww, c4.z, c4.w
mad r1, r0.yyww, r1, c5.w
mad r1, r0.yyww, r1, c16.x
mad r1, r0.yyww, r1, c16.y
mad r0, r0, r1, c16.z
mul r0, r0, c12.zzww
mad r0, r0, c15.x, c15.yzyz
frc r0, r0
mad r0, r0, c4.x, c4.y
mul r0, r0, r0
mad r1, r0, c4.z, c4.w
mad r1, r0, r1, c5.w
mad r1, r0, r1, c16.x
mad r1, r0, r1, c16.y
mad r0, r0, r1, c16.z
mad r1.xy, v1.y, c16.wzzw, c16.zyzw
mul r1, r0.yxwz, r1.xyxy
add r2, c16.y, v1.xyxy
mad r1.xz, r1, r2.z, -r1.yyww
mul r0, r0, r2
add r1.yw, r0, r0.xxzz
add r0, r1, -c16.y
mov r1.x, c10.x
mul r1, r1.x, c11
mad o3.yw, c13, r0, -r1.xxzy
mul r0.xy, r0.xzzw, c13.xzzw
mov o3.xz, r0.xyyw
mad o4.yw, c14, v1.y, -r1.xzzw
mul r0.xyz, c7, v0.y
mad r0.xyz, c6, v0.x, r0
mad r0.xyz, c8, v0.z, r0
mad r0.xyz, c9, v0.w, r0
mul r1, r0.y, c1
mad r1, c0, r0.x, r1
mad r0, c2, r0.z, r1
mad r0, c3, v0.w, r0
mov o0, r0
mov o5, r0
mov o1, c16.w
mov o2, c16.w
mul r0.xy, c14.xzzw, v1.x
mov o4.xz, r0.xyyw

// approximately 51 instruction slots used


// PS
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float4 BloomTintAndScreenBlendThreshold;
//   sampler2D ColorGradingLUT;
//   float4 DNEImageGrainParameter;
//   sampler2D DNEImageGrainTexture;
//   float4 DNEScreenPositionScaleBias;
//   float4 DNEVignetColor;
//   float4 DNEVignetMaskFactors;
//   sampler2D DNEVignetTexture;
//   sampler2D FilterColor1Texture;
//   float4 HalfResMaskRect;
//   float4 ImageAdjustments1;
//   float4 ImageAdjustments2;
//   sampler2D LowResPostProcessBuffer;
//   float4 MinZ_MaxZRatio;
//   float2 NvStereoEnabled;
//   sampler2D NvStereoFixTexture;
//   float4 RainAlphas;
//   sampler2D RainBlendTexture;
//   float RainIntensity;
//   float4 RainLayersDist;
//   sampler2D RainTexture;
//   sampler2D SceneColorTexture;
//   float4 SceneCoordinate1ScaleBias;
//   float4 SceneCoordinate2ScaleBias;
//   float4 SceneCoordinate3ScaleBias;
//   float4 UVScaleBias;
//
//
// Registers:
//
//   Name                             Reg   Size
//   -------------------------------- ----- ----
//   BloomTintAndScreenBlendThreshold c0       1
//   MinZ_MaxZRatio                   c2       1
//   NvStereoEnabled                  c3       1
//   ImageAdjustments1                c7       1
//   ImageAdjustments2                c8       1
//   HalfResMaskRect                  c9       1
//   RainIntensity                    c10      1
//   UVScaleBias                      c11      1
//   SceneCoordinate1ScaleBias        c12      1
11	0.5 - 0.5	0.5004629	0.5002604
12	1	1	0	0
13	0.5 - 0.5	0.5004629	0.5002604
14	0.4979253 - 0.4963235	0.5004596	0.5002593
//   SceneCoordinate2ScaleBias        c13      1
//   SceneCoordinate3ScaleBias        c14      1
//   RainLayersDist                   c15      1  //	500	1100	2500	5000
//   RainAlphas                       c16      1
//   DNEScreenPositionScaleBias       c17      1
//   DNEImageGrainParameter           c18      1
//   DNEVignetColor                   c19      1
//   DNEVignetMaskFactors             c20      1
//   SceneColorTexture                s0       1
//   NvStereoFixTexture               s1       1
//   FilterColor1Texture              s2       1
//   RainTexture                      s3       1
//   RainBlendTexture                 s4       1
//   DNEImageGrainTexture             s5       1
//   DNEVignetTexture                 s6       1
//   ColorGradingLUT                  s7       1
//   LowResPostProcessBuffer          s8       1
//

ps_3_0
def c1, 0.0625, 0, 4, -3
def c4, 0.300000012, 0.589999974, 0.109999999, 0.0900000036
def c5, 0, 1, 0.5, -0.5
def c6, 14.9998999, 0.05859375, 0.234375, 15
def c21, 0.001953125, 0.0078125, 0.064453125, 0
def c22, 2, -1, 0, 0
dcl_texcoord v0.xyw
dcl_texcoord3 v1
dcl_texcoord4 v2
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8

r0.x = dis2-dis1
r0.z = dis3 - dis2 - dis1
r0.y = dis4 - (dis3 - dis2 - dis1)
r0.w = NvStereoEnabled
if (NvStereoEnabled != 0)
{
	texld r1, c1, s1
	add r1.y, -r1.y, v0.w
	mad r1.x, r1.x, r1.y, v0.x
	mov r1.yz, v0.xyww
}
else
{
	r1.xyz = 0
}
if (NvStereoEnabled <= 0)
{
	r1.xyz = v0.xyww;
}
r0.w = 1 / v0.w;
r1.xy = ScreenCoord

r1.zw = ScreenCoord 
r2.xy = ScreenCoord * (0.5,-0.5) + (0.5,0.5)
r3.xy = ScreenCoord * (0.5, -0.5) + (0.5, 0.5)
r3.zw = ScreenCoord * (0.5, -0.5) + (0.5, 0.5)
r1.zw = ScreenCoord * (0.5, -0.5) + (0.5, 0.5)
c9.zw < r3.xy <  HalfResMaskRect.xy
r2.zw = 00
r2.xyzw = s0(ScreenCoord * (0.5, -0.5) + (0.5, 0.5))
	texldl_pp r2, r2, s0
r0.w = -10000
r4 = s8(r3.xy)
	mul r5, r4.zzxy, c1.z
	mad r2, r4.zzxy, -c1.z, r2.zzxy
	mad_pp r2, r4.w, r2, r5
	texld r3, r3.zwzw, s2
	mul r3, r3.zzxy, c0.zzxy
	mul_pp r3, r3, c1.z
	dp3_pp r4.x, r2.zwyw, c4
	mul_pp r4.x, r4.x, c1.w
	exp_pp r4.x, r4.x
	mul_sat_pp r4.x, r4.x, c0.w
	mad_pp r2, r3, r4.x, r2
	mov r3.xy, c5
	mul r4, r3.xyyy, c15.xxyz
	mad r4, c2.x, r0.w, -r4
	rcp r5.x, c15.x
	rcp r5.y, r0.x
	rcp r5.z, r0.z
	rcp r5.w, r0.y
	mul_sat r0, r4, r5
	mul_pp r0, r0, c16
	mad_pp r1.xy, r1, c5.zwzw, c5.z
	texld_pp r4, r1, s4
	texld_pp r5, v1, s3
	texld_pp r6, v1.zwzw, s3
	texld_pp r7, v2, s3
	texld_pp r8, v2.zwzw, s3
	mul_pp r0, r0, r4
	mov_pp r5.y, r6.x
	mov_pp r5.z, r7.x
	mov_pp r5.w, r8.x
	dp4_pp r0.x, r5, r0
	mul r0.x, r0.x, c10.x
	mad_pp r0, r0.x, c4.w, r2
	mad_pp r2.xyz, r0.zwyw, c8.y, c8.x
	rcp r4.z, r2.x
	rcp r4.w, r2.y
	rcp r4.xy, r2.z
	mul_sat_pp r0, r0, r4
	mul r2.xyw, r0.xwzz, c6.xzzy
	frc r0.x, r2.x
	add r0.x, -r0.x, r2.x
	mad r0.y, r0.y, c6.w, -r0.x
	mad r2.x, r0.x, c1.x, r2.w
	add r2, r2.xyxy, c21.xyzy
	texld_pp r4, r2, s7
	texld_pp r2, r2.zwzw, s7
	lrp_pp r5, r0.y, r2, r4
	mov r0.z, c1.z
	mad_pp r0.xy, r1.zwzw, r0.z, c18
	texld r1, r1.zwzw, s6
	dp4_sat r0.z, r1, c20
	add r1.xyz, -r3.y, c19
	mad r1.xyz, r0.z, r1, c5.y
	texld_pp r0, r0, s5
	mad r0.x, r0.x, c22.x, c22.y
	mul r0.x, r0.x, c7.w
	mad_sat_pp oC0.xyz, r5, r1, r0.x
	mov_pp oC0.w, r5.w

	// approximately 90 instruction slots used (14 texture, 76 arithmetic)
